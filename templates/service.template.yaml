Description: >
  This template deploys the Clara Train SDK as an ECS service, accessible via a load balancer.
  The Clara container mounts an existing EFS so models and data are persisted. (qs-1ql5cpbj9)

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id
  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String
  DesiredCount:
    Description: Desired number of instances of this task to run across the cluster
    Type: Number
    Default: 1
  MaxCount:
    Description: Maximum number of instances of this task to run across the cluster
    Type: Number
    Default: 1
  Listener:
    Description: Application Load Balancer listener to register with
    Type: String
  Path:
    Description: Path to register with the Application Load Balancer
    Type: String
    Default: /
  ECSServiceAutoScalingRoleARN:
    Description: ECS service auto scaling role ARN
    Type: String
  ElasticFileSystemDnsName:
    Description: DNS name for the Amazon EFS file system.
    Type: String
  ContainerImageRegistry: 
    Description: Location of docker image or repository registry to pull
    Type: String
  UseHTTPS:
    Description: Enable end-to-end encryption of connections to annotation server
    AllowedValues:
     - HTTPS
     - HTTP
    Default: HTTPS
    Type: String

Mappings:
  Defaults:
    HTTPS:
      Port: 443
      Command: "start_aiaa.sh --debug --engine AIAA -p 443 --ssl_certfile /workspace/certs/clara.crt --ssl_keyfile /workspace/certs/clara.key  --workspace /workspace/AIAA"
      Protocol: HTTPS
    HTTP:
      Port: 80
      Command: "start_aiaa.sh --debug --engine AIAA -p 80 --workspace /workspace/AIAA"
      Protocol: HTTP

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 180
      LoadBalancers:
        - ContainerName: "website-service"
          ContainerPort: !FindInMap [ Defaults, !Ref UseHTTPS, Port]
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: website-service
      ContainerDefinitions:
        - Name: website-service
          Essential: true
          Image: !Ref ContainerImageRegistry
          Memory: 24576
          Command: [!FindInMap [ Defaults, !Ref UseHTTPS, Command]]
          EntryPoint: ["sh", "-c"]
          PortMappings:
            - ContainerPort: !FindInMap [ Defaults, !Ref UseHTTPS, Port]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          MountPoints: 
            - ContainerPath: "/workspace"
              SourceVolume: "clara-efs"
          ResourceRequirements:
            - Type: GPU
              Value: "1"
      Volumes:
        - Name: "clara-efs"
          DockerVolumeConfiguration:
            Autoprovision: true
            Scope: "shared"
            Driver: "local"
            DriverOpts:
              type: "nfs"
              device: ":/"
              o: !Join [ '', ["addr=", !Ref ElasticFileSystemDnsName, ",nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport"]]

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: !FindInMap [ Defaults, !Ref UseHTTPS, Port]
      Protocol: !FindInMap [ Defaults, !Ref UseHTTPS, Protocol]
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /docs/
      HealthCheckProtocol: !FindInMap [ Defaults, !Ref UseHTTPS, Protocol]
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Join ['', [!Ref Path, '*']]
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ecs.amazonaws.com
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName} 
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:Describe*
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:GetAuthorizationToken
              Resource: "*"

  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      RoleARN: !Ref ECSServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization greater than 90%
      AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90.0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleOutPolicy

  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization less than 70%
      AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 70.0
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleInPolicy
